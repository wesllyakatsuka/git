 	Comandos

https://github.com/wesllyakatsuka/git.git

//fluxo usado para subir alterações em um repositório clonado
git add --all
git commit -m 'mensagem'
git pull origin master
git push -u origin master


//or create a new repository on the command line
echo "# teste" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/wesllyakatsuka/teste.git
git push -u origin master


//or push an existing repository from the command line
git remote add origin https://github.com/wesllyakatsuka/teste.git
git push -u origin master


//Não conseguia enviar arquivos para repositório recém criado com os caomandos acima e com os comandos abaixo tudo se resolveu.
git fetch origin master:tmp
git rebase tmp
git push origin HEAD:master
git branch -D tmp
--------------------------------------------------------------------------------------------------------------------------------

git config --global user.name "wesllyakatsuka"
//Configura o seu nome de usuário (Tem que ser o mesmo cadastrado  no memomento da conta)

git config --global user.email "insiraSeuEmail@gmail.com - sem aspas"
//Configura o seu nome de usuário (Tem que ser o mesmo cadastrado na criação da conta)

git status
//Exibe tudos os arquivos dentro de uma pasta e aponta se estão ou não sendo rastreados

git config --global -l
//lista o nome de usuário e email que estão configurados. Também exibe outras preferências que forma customizadas.

git config --global core.editor
//configurar seu editor preferido

git add "nome do arquivo com extensão e em aspas"
//Adicionar a stage do github

git commit -m "Comente o que foi alterado"
//deixar um breve comentário e submeter

git add .
//adiciona todos os arquivos de uma só vez

git commit am "Editando..."
//am = add e mensagem

git log
//exibe o histórico

git checkout ec26f2205d220abc71a89c21f60295fcbf8c2c3a
//adicione o código de um commit na frente do Comandos, permite enxergar determinada versão do arquivo

git log --oneline --graph --decorate --all 
//comando que detalha bem o HEAD e MASTER

git checkout master
//volta para a master

git remote add origin https://github.com/wesllyakatsuka/git.git
//aponta o github a ser adicionado

git push -u origin master
//sobe no github o último arquivo

git branch
//consultando as branch que existem

git branch nomeDaNovaBranch
//criando nova branch

git checkout nova-branch
//acessando a nova-branch

git checkout master
//retornando para a master

git merge nomeDaNovaBranch
//Logado na branch master, junta os arquivos da outra branch nomeDaNovaBranch a master, na 
modalidade Fast-forward 

git log --graph
//Exibe detalhes dos mergers realizado

git branch -d alternativa
//Exclui branch alternativa

git checkout -b alternativa2
//Cria uma nova branch chamada alternativa2 e já se loga nela.

git merge final 
//Junta os arquivos.  

git commit -m "criação da página de contato #2"
//trabalhando com  o recurso Issue - o comando cria um rastreio usando o sustenido.

git commit -m "alteração final da página de contato closes #2"
//A inclusão da palavra CLOSES seguida do sustenido, fecha e dá como encerrada a issue e branch.

:
//Digite a tecla "Q" para sair


	Seção 5 

git checkout nomeDoSeuArquivo.txt
//Esse comando permite que você apague as alterações 

git reset head nomeDoSeuArquivo.txt
//Realizar alterações que já estão na stage

git reset head^
//Volta um passe anterior. OBS: Se usar ^^ volta 2 passos, ^^^ 3 passos e assim por diante.

git rm --cached nomeDoSeuArquivo.txt
//Git deixa de rastrear as alterações feita nesse arquivo

git checkout (e inseri o código do hash do log)
//Pode desfazer e voltar a rastrear

git reset --hard (e inseri o código do hash do log)
//Apaga tudo dentro dos commits e não tem volta

git remote add upstream (url do repositório principal que foi feito o Fork)
//Permite rastrear as alterações de um repositório de terceiros que foi copiado como Fork

git remote -v
//Exibe quantos projetos remotos contém

git pull upstream master
//Sincroniza os nosso repositório local com o repositório principal


	Secão 6 - Rebase



	Seção 8 - Single Repository Workflow

//Revisando o Fluxo

git clone
git checkout -b, git add, git commit
git push
Pull request
git pull


git add . && git commit -m 'mensagem'
//É possível enviar os comandos concatenados

git reset --hard head^  
//apaga o commit anterior porque não havia permissão no repositório para esse usuário

git branch -a
//exibe as branches que tenho permissão de acesso

git checout 'nomeDaBranch'
//faz um track da branch remota

git log --oneline
//exibe o histórico com o hash e as mensagens do que foi criado pelo outro contribuidor

git pull --rebase
//exibe o conflito 

git add . && git rebase --continue
//submete tudo novamente após o ajuste manual no editor

git log --oneline
//para visualizar como ficou o histórico após o ajuste

git push
//com tudo ok, envia


	Seção 9 - Git Stash










